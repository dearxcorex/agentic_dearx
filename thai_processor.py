"""Thai language processing utilities"""

import re
from typing import Dict, List, Optional, Tuple
from openrouter_client import OpenRouterClient
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ThaiProcessor:
    """Enhanced Thai language processing for FM station planning"""

    def __init__(self):
        self.llm_client = OpenRouterClient()

        # Thai number mappings
        self.thai_numbers = {
            '‡πê': '0', '‡πë': '1', '‡πí': '2', '‡πì': '3', '‡πî': '4',
            '‡πï': '5', '‡πñ': '6', '‡πó': '7', '‡πò': '8', '‡πô': '9'
        }

        # Common Thai location keywords
        self.location_keywords = {
            'provinces': [
                '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô',
                '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ'
            ],
            'time_words': ['‡∏ô‡∏≤‡∏ó‡∏µ', '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', '‡∏ä‡∏°.', '‡∏ô.'],
            'station_words': ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ', '‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏', 'FM', '‡πÄ‡∏≠‡∏ü‡πÄ‡∏≠‡πá‡∏°'],
            'route_words': ['‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á', '‡∏ó‡∏≤‡∏á', '‡πÅ‡∏ú‡∏ô', 'route']
        }

    def parse_thai_input(self, text: str) -> Dict:
        """
        Comprehensive Thai text parsing

        Returns:
            Dict with extracted information:
            - locations: List of location mentions
            - numbers: List of numbers found
            - time_constraints: Time requirements
            - station_count: Number of stations requested
            - special_requests: Any special requirements
        """

        # Convert Thai numbers to Arabic
        text_normalized = self.normalize_thai_numbers(text)

        # Extract all numbers
        numbers = self.extract_numbers(text_normalized)

        # Extract location mentions
        locations = self.extract_locations(text)

        # Parse time constraints
        time_constraints = self.parse_time_constraints(text_normalized, numbers)

        # Determine station count
        station_count = self.determine_station_count(text_normalized, numbers)

        # Check for route request
        needs_route = self.check_route_request(text)

        # Extract any special requirements using LLM
        special_requests = self.extract_special_requirements(text)

        result = {
            "original_text": text,
            "locations": locations,
            "numbers": numbers,
            "time_constraints": time_constraints,
            "station_count": station_count,
            "needs_route": needs_route,
            "special_requests": special_requests
        }

        logger.info(f"Parsed Thai input: {result}")
        return result

    def normalize_thai_numbers(self, text: str) -> str:
        """Convert Thai numbers to Arabic numbers"""
        result = text
        for thai_num, arabic_num in self.thai_numbers.items():
            result = result.replace(thai_num, arabic_num)
        return result

    def extract_numbers(self, text: str) -> List[int]:
        """Extract all numbers from text"""
        # Find all numeric patterns
        patterns = [
            r'\d+',  # Simple numbers
            r'\d+-\d+',  # Ranges
            r'\d+\.\d+',  # Decimals
        ]

        numbers = []
        for pattern in patterns:
            matches = re.findall(pattern, text)
            for match in matches:
                if '-' in match:
                    # Handle ranges
                    parts = match.split('-')
                    numbers.extend([int(p) for p in parts if p.isdigit()])
                elif '.' in match:
                    # Handle decimals as integers
                    numbers.append(int(float(match)))
                else:
                    numbers.append(int(match))

        return numbers

    def extract_locations(self, text: str) -> List[Dict]:
        """Extract location mentions from text"""
        locations = []

        # Check for known provinces
        for province in self.location_keywords['provinces']:
            if province in text:
                locations.append({
                    "name": province,
                    "type": "province",
                    "position": text.find(province)
                })

        # Use LLM for more complex location extraction
        if not locations:
            llm_locations = self.llm_client.parse_location(text)
            if llm_locations.get("province"):
                locations.append({
                    "name": llm_locations["province"],
                    "type": "province",
                    "position": 0
                })

        # Sort by position in text
        locations.sort(key=lambda x: x["position"])

        return locations

    def parse_time_constraints(self, text: str, numbers: List[int]) -> Dict:
        """Extract time constraints from text"""
        time_info = {
            "has_constraint": False,
            "minutes": None,
            "range": None
        }

        # Look for time keywords
        time_patterns = [
            (r'(\d+)\s*-\s*(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|‡∏ä‡∏°\.?|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)', 'range'),
            (r'‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô\s*(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|‡∏ä‡∏°\.?|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)', 'max'),
            (r'(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|‡∏ä‡∏°\.?|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)', 'exact'),
            (r'‡∏†‡∏≤‡∏¢‡πÉ‡∏ô\s*(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|‡∏ä‡∏°\.?|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)', 'within')
        ]

        for pattern, constraint_type in time_patterns:
            match = re.search(pattern, text)
            if match:
                time_info["has_constraint"] = True

                if constraint_type == 'range':
                    min_time = int(match.group(1))
                    max_time = int(match.group(2))
                    unit = match.group(3)

                    # Convert hours to minutes if needed
                    if '‡∏ä‡∏°' in unit or '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á' in unit:
                        min_time *= 60
                        max_time *= 60

                    time_info["range"] = (min_time, max_time)
                    time_info["minutes"] = max_time

                else:
                    time_value = int(match.group(1))
                    unit = match.group(2) if match.lastindex >= 2 else '‡∏ô‡∏≤‡∏ó‡∏µ'

                    # Convert hours to minutes if needed
                    if '‡∏ä‡∏°' in unit or '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á' in unit:
                        time_value *= 60

                    time_info["minutes"] = time_value

                break

        return time_info

    def determine_station_count(self, text: str, numbers: List[int]) -> int:
        """Determine how many stations are requested"""

        # Look for patterns like "10 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ" or "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ 10 ‡πÅ‡∏´‡πà‡∏á"
        station_patterns = [
            r'(\d+)\s*‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ',
            r'‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ\s*(\d+)\s*‡πÅ‡∏´‡πà‡∏á',
            r'‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ.*?(\d+)',
            r'(\d+)\s*‡πÅ‡∏´‡πà‡∏á'
        ]

        for pattern in station_patterns:
            match = re.search(pattern, text)
            if match:
                return int(match.group(1))

        # If no explicit station count, use first reasonable number
        for num in numbers:
            if 1 <= num <= 50:  # Reasonable range for station count
                return num

        # Default to 10 stations
        return 10

    def check_route_request(self, text: str) -> bool:
        """Check if user wants route planning"""
        route_indicators = [
            '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á', '‡πÅ‡∏ú‡∏ô', '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô', '‡∏ó‡∏≤‡∏á',
            'route', 'plan', '‡πÑ‡∏õ‡∏¢‡∏±‡∏á', '‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á'
        ]

        text_lower = text.lower()
        return any(indicator in text_lower for indicator in route_indicators)

    def extract_special_requirements(self, text: str) -> List[str]:
        """Extract any special requirements using LLM"""

        prompt = f"""Extract special requirements from this Thai text:
{text}

Look for:
- Specific station preferences
- Time of day preferences
- Vehicle type
- Special conditions

Return as a JSON array of requirements. If none, return empty array."""

        try:
            response = self.llm_client.complete(
                prompt,
                task_type="simple_tasks"
            )

            # Parse response
            import json
            requirements = json.loads(response)
            return requirements if isinstance(requirements, list) else []

        except Exception as e:
            logger.error(f"Failed to extract special requirements: {e}")
            return []

    def format_thai_response(self,
                           stations: List[Dict],
                           route_info: Dict,
                           requirements: Dict) -> str:
        """
        Format comprehensive Thai language response

        Creates a well-structured response with:
        - Greeting and acknowledgment
        - Station list with details
        - Route information
        - Time summary
        - Cost information
        """

        lines = []

        # Greeting based on request
        location_name = requirements.get("location", {}).get("province", "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        station_count = len(stations)

        lines.append(f"‚úÖ ‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ FM ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {station_count} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏ô{location_name}")
        lines.append("")

        # Station listing
        lines.append("üìç ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ:")
        lines.append("-" * 40)

        for i, station in enumerate(stations, 1):
            # Station basic info
            name = station.get("station_name", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠")
            freq = station.get("frequency", "?")
            dist = station.get("distance_km", station.get("distance_from_start", 0))

            lines.append(f"{i}. {name} ({freq} MHz)")
            lines.append(f"   üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: {dist:.1f} ‡∏Å‡∏°.")

            # Add travel time if available
            if i <= len(route_info.get("segments", [])):
                segment = route_info["segments"][i-1]
                travel_time = segment.get("travel_time_minutes", 0)
                lines.append(f"   üöó ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: {travel_time:.0f} ‡∏ô‡∏≤‡∏ó‡∏µ")

            lines.append(f"   üîß ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: 10 ‡∏ô‡∏≤‡∏ó‡∏µ")
            lines.append("")

        # Route summary
        lines.append("-" * 40)
        lines.append("üìä ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        lines.append(f"‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: {station_count} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ")
        lines.append(f"‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°: {route_info.get('total_distance_km', 0):.1f} ‡∏Å‡∏°.")
        lines.append(f"‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: {route_info.get('total_travel_time_minutes', 0):.0f} ‡∏ô‡∏≤‡∏ó‡∏µ")
        lines.append(f"‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {route_info.get('total_inspection_time_minutes', 0)} ‡∏ô‡∏≤‡∏ó‡∏µ")
        lines.append(f"‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {route_info.get('total_time_minutes', 0):.0f} ‡∏ô‡∏≤‡∏ó‡∏µ")

        # Check time constraint
        if requirements.get("time_constraint_minutes"):
            max_time = requirements["time_constraint_minutes"]
            total_time = route_info.get("total_time_minutes", 0)

            if total_time <= max_time:
                lines.append(f"‚úÖ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ({max_time} ‡∏ô‡∏≤‡∏ó‡∏µ)")
            else:
                lines.append(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ({max_time} ‡∏ô‡∏≤‡∏ó‡∏µ)")

        # Algorithm used (if optimized)
        if route_info.get("algorithm_used"):
            algo_name = route_info["algorithm_used"]
            lines.append(f"‚Ä¢ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {self._translate_algorithm(algo_name)}")

        return "\n".join(lines)

    def _translate_algorithm(self, algo_name: str) -> str:
        """Translate algorithm names to Thai"""
        translations = {
            "nearest_neighbor": "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
            "2opt": "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á 2-opt",
            "christofides": "‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° Christofides",
            "brute_force": "‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
            "adaptive": "‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
        }
        return translations.get(algo_name, algo_name)